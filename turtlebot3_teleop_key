#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
from geometry_msgs.msg import Point
import sys, select, os
import math
if os.name == 'nt':
    import msvcrt
else:
    import tty, termios
from sensor_msgs.msg import Illuminance
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion, quaternion_from_euler
from sensor_msgs.msg import LaserScan

#####################################################################################
roll = pitch = yaw = 0.0
kp = 1.0
tp = 0.018#0.02
angPosStep = 0.055#0.0625 # 1e-3
desAngPos = 0.0
leftlightval = 0.0
rightlightval = 0.0
phi = 0.0
####################################
# obstacle avoidance variables
posx = 0.0
posy = 0.0
theta = 0.0
range = 0.0
range_min = 0.40#0.227448582649 #testing value
point_one = [-0.895728, -0.756365]
point_two = [-0.500863, -1.284815]

# OBSTACLE POSE for examination
# X = -0.881204
# Y = -1.401245
# Z = 0.499990

# POINT 1
# X = -0.895728
# Y = -0.756365

# POINT 2 (RURN TO TRACK)
# X = -0.476662
# Y = -1.258210

def obstacle_routine(point, twist, pub):
    desX = point[0]
    desY = point[1]
    twist.linear.y = 0.0
    twist.linear.z = 0.0
    twist.angular.x = 0.0
    twist.angular.y = 0.0
    while (1):
        xError = desX - posx
        yError = desY - posy
        if (math.sqrt(xError ** 2 + yError ** 2) < 0.1):
            twist.linear.x = 0.0
            twist.angular.z = 0.0
            pub.publish(twist)
            return
        desPhi = math.atan2(yError, xError)
        phiError = desPhi - phi
        angularVel = 0.15 * phiError
        if(abs(phiError) < 0.1):
            twist.linear.x = 0.25
            twist.angular.z = 0.0
        else:
            twist.linear.x = 0.0
            twist.angular.z = angularVel
        pub.publish(twist)

'''def obstacle_routine(point, twist, pub):
    goal = Point()
    goal.x = point[0]
    goal.y = point[1]
    #dist = math.sqrt(xd*xd + yd*yd)
    while (1):
        xd = goal.x - posx
        yd = goal.y - posy
        angle_to_goal = math.atan2(yd, xd)
        print("goal: x = " + str(goal.x) + ", y = " + str(goal.y))
        print("xd = " + str(xd) + ", yd = " + str(yd))
        if abs(angle_to_goal - phi) > 0.1:
            print("rotating")
            twist.linear.x = 0.0
            twist.angular.z = 0.15*(angle_to_goal - phi)
        else:
            print("forward")
            twist.linear.x = tp
            twist.angular.z = 0.0
        pub.publish(twist)
        rate = rospy.Rate(4) #hz
        rate.sleep()
'''



def get_pose(msg):
    global posx, posy, theta
    posx = msg.pose.pose.position.x
    posy = msg.pose.pose.position.y
    #phi

def get_laser_scan(msg):
    global range
    range = msg.ranges[0]



## real phi value OR desired phi value (angle of rotation)
def get_rotation(msg):
    global roll, pitch, yaw, phi
    orientation_q = msg.pose.pose.orientation
    orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
    (roll, pitch, yaw) = euler_from_quaternion(orientation_list)
    phi = yaw
    # print("PHI : " + str(yaw))
    # rospy.loginfo('PHI: {}'.format(yaw))


def leftIlluminance(data):
    global leftlightval
    leftlightval = data.illuminance
    # rospy.loginfo('x: {}, y: {}'.format(leftlightval))


def get_illuminance(data):
    global rightlightval
    rightlightval = data.illuminance
    # rospy.loginfo('leftIl: {}, rightIl: {}'.format(leftlightval, rightlightval))
#    if (rightlightval > leftlightval):  ##des abng =  current position + angpos step
#        desAngPos = angPosStep
#    if (rightlightval < leftlightval):
#        desAngPos =- angPosStep
    #print("desAngPos: " + str(desAngPos))
    # rospy. loginfo('desAngPos: {}'.format(desAngPos))


#####################################################################################


BURGER_MAX_LIN_VEL = 0.22
BURGER_MAX_ANG_VEL = 2.84

WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82

LIN_VEL_STEP_SIZE = 0.01
ANG_VEL_STEP_SIZE = 0.1

msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)

space key, s : force stop

CTRL-C to quit
"""

e = """
Communications Failed
"""


def getKey():
    if os.name == 'nt':
        return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key


def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel, target_angular_vel)


def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min(input, output + slop)
    elif input < output:
        output = max(input, output - slop)
    else:
        output = input

    return output


def constrain(input, low, high):
    if input < low:
        input = low
    elif input > high:
        input = high
    else:
        input = input

    return input


def checkLinearLimitVelocity(vel):
    if turtlebot3_model == "burger":
        vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
        vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:
        vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel


def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":
        vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
        vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:
        vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)

    return vel


if __name__ == "__main__":

    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('turtlebot3_teleop')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    #####################################################################################
    odomsub = rospy.Subscriber("/odom", Odometry, get_rotation)
    sub2 = rospy.Subscriber("/light_sensor_plugin/leftLightSensor", Illuminance, leftIlluminance)
    sub1 = rospy.Subscriber("/light_sensor_plugin/lightSensor", Illuminance, get_illuminance)
    #####################################################################################
    #obstacle avoidance
    odom_sub_avoidance = rospy.Subscriber("/odom", Odometry, get_pose)
    laser_scan_sub = rospy.Subscriber("/scan", LaserScan, get_laser_scan)

    turtlebot3_model = rospy.get_param("model", "burger")

    status = 0
    target_linear_vel = 0.0
    target_angular_vel = 0.0
    control_linear_vel = 0.0
    control_angular_vel = 0.0

    autoRun = False

    try:
        print(msg)
        while (1):
            key = getKey()
            if key == 'w':
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel, target_angular_vel))
            elif key == 'x':
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel, target_angular_vel))
            elif key == 'a':
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel, target_angular_vel))
            elif key == 'd':
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
                status = status + 1
                print(vels(target_linear_vel, target_angular_vel))
            elif key == ' ' or key == 's':
                target_linear_vel = 0.0
                control_linear_vel = 0.0
                target_angular_vel = 0.0
                control_angular_vel = 0.0
                print(vels(target_linear_vel, target_angular_vel))
            elif key == 'j':
                print("j")
                autoRun = True
            elif key == 'k':
                print("k")
                autoRun = False
            else:
                if (key == '\x03'):
                    break

            if status == 20:
                print(msg)
                status = 0

            twist = Twist()

            if autoRun:
                print(tp)

                print(str(rightlightval))
                print(str(leftlightval))
                if (rightlightval > leftlightval):  ##des abng =  current position + angpos step
                    desAngPos = phi + angPosStep
                elif (rightlightval < leftlightval):
                    desAngPos = phi - angPosStep

                twist.linear.y = 0.0
                twist.linear.z = 0.0

                twist.angular.x = 0.0
                twist.angular.y = 0.0
                if(range_min >= range):
                    print("Obstacle spotted")
                    obstacle_routine(point_one, twist, pub)
                    obstacle_routine(point_two, twist, pub)
                    while (phi < 0.4):
                        twist.linear.x = 0
                        twist.angular.z = 0.055
                        pub.publish(twist)
                twist.linear.x = tp
                print("--------------------------")
                print("range_min: " + str(range_min))
                print("range: " + str(range))
                print("posx: " + str(posx) + "  posy: " + str(posy))
                print("linearvel: " + str(tp))
                print("rightlight: " + str(rightlightval))
                print("leftlight: " + str(leftlightval))
                print("kp: " + str(kp))
                print("desAngPos: " + str(desAngPos))
                print("AngPos: " + str(phi))
                #print("AngPos: " + str(twist.angular.z))
                twist.angular.z = kp * (desAngPos - phi)
                print("Angvel: " + str(twist.angular.z))

            else:
                control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE / 2.0))
                twist.linear.x = control_linear_vel;
                twist.linear.y = 0.0;
                twist.linear.z = 0.0

                control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel,
                                                        (ANG_VEL_STEP_SIZE / 2.0))
                twist.angular.x = 0.0;
                twist.angular.y = 0.0;
                twist.angular.z = control_angular_vel

            pub.publish(twist)

    except:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0.0;
        twist.linear.y = 0.0;
        twist.linear.z = 0.0
        twist.angular.x = 0.0;
        twist.angular.y = 0.0;
        twist.angular.z = 0.0
        pub.publish(twist)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
